package main

import (
	"io/ioutil"
	"path/filepath"

	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/app"
	"fyne.io/fyne/v2/canvas"
	"fyne.io/fyne/v2/container"
	"fyne.io/fyne/v2/theme"
	"fyne.io/fyne/v2/widget"
)

var myapp fyne.App = app.New()
var myWindow fyne.Window = myapp.NewWindow("Virtual OS")

var btn1 fyne.Widget
var btn2 fyne.Widget
var btn3 fyne.Widget
var btn4 fyne.Widget
var btn5 fyne.Widget
var btn6 fyne.Widget
var btn7 fyne.Widget
var btn8 fyne.Widget
var desktopBtn fyne.Widget
var panelContent *fyne.Container

var img fyne.CanvasObject

func main() {

	clockOn := false
	
	r, _ := LoadResourceFromPath("logo\\windows.png")
	myWindow.SetIcon(r)
	img = canvas.NewImageFromFile("logo\\wall.jpg")
	btn1 = widget.NewButtonWithIcon("Calculator", theme.ContentAddIcon(), func() {
		showCalc()
	})
	btn2 = widget.NewButtonWithIcon("Weather", theme.InfoIcon(), func() {
		showWeatherApp()
	})
	btn3 = widget.NewButtonWithIcon("Gallery", theme.StorageIcon(), func() {
		showGalleryApp()
	})
	btn4 = widget.NewButtonWithIcon("Text Editor", theme.DocumentCreateIcon(), func() {
		showTextEditor()
	})
	btn5 = widget.NewButtonWithIcon("Clock", theme.DefaultTextBoldItalicFont(), func() {
		if !clockOn {
			Show()
			clockOn = true
		} else {
			clockClose()
			clockOn = false
		}
		clockOn = !clockOn
	})
	btn6 = widget.NewButtonWithIcon("Music Player", theme.MediaMusicIcon(), func() {
		showMusicPlyer()
	})
	btn7 = widget.NewButton("News Nation", func() {
		showNews()
	})
	btn8 = widget.NewButtonWithIcon("Movie Adda!", theme.MediaPlayIcon(), func() {
		showMovieAdda(myWindow)
	})
	desktopBtn = widget.NewButtonWithIcon("DESKTOP", theme.HomeIcon(), func() {
		myWindow.SetContent(container.NewBorder(panelContent, nil, nil, nil, img))
	})
	panelContent = container.NewVBox((container.NewGridWithColumns(5, desktopBtn, btn1, btn2, btn3, btn4, btn5, btn6, btn7, btn8)))

	myWindow.Resize(fyne.NewSize(1380, 720))
	myWindow.CenterOnScreen()

	myWindow.SetContent(container.NewBorder(panelContent, nil, nil, nil, img))

	myWindow.ShowAndRun()
}

// //////Load resource
type Resource interface {
	Name() string
	Content() []byte
}

// StaticResource is a bundled resource compiled into the application.
// These resources are normally generated by the fyne_bundle command included in
// the Fyne toolkit.
type StaticResource struct {
	StaticName    string
	StaticContent []byte
}

// Name returns the unique name of this resource, usually matching the file it
// was generated from.
func (r *StaticResource) Name() string {
	return r.StaticName
}

// Content returns the bytes of the bundled resource, no compression is applied
// but any compression on the resource is retained.
func (r *StaticResource) Content() []byte {
	return r.StaticContent
}

// NewStaticResource returns a new static resource object with the specified
// name and content. Creating a new static resource in memory results in
// sharable binary data that may be serialised to the system cache location.
func NewStaticResource(name string, content []byte) *StaticResource {
	return &StaticResource{
		StaticName:    name,
		StaticContent: content,
	}
}
func LoadResourceFromPath(path string) (Resource, error) {
	bytes, err := ioutil.ReadFile(filepath.Clean(path))
	if err != nil {
		return nil, err
	}

	name := filepath.Base(path)
	return NewStaticResource(name, bytes), nil
}

